name: Build Dolphin (Linux)

on:
  workflow_dispatch:
    inputs:
      cache_to_S3:
        description: 'Upload cache to S3'
        required: true
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download and extract source
      run: |
        arch=$(echo "$RUNNER_ARCH" | tr '[:upper:]' '[:lower:]')
        cache_key="ccache-${{ runner.os }}-${arch}"
        echo "arch=$arch" >> $GITHUB_ENV
        echo "cache_key=$cache_key" >> $GITHUB_ENV
        if [ "$arch" = "x64" ]; then
            depsUrl="${{ vars.DEPS_LINUX_X64 }}"
        elif [ "$arch" = "arm64" ]; then
            depsUrl="${{ vars.DEPS_LINUX_ARM64 }}"
        else
            echo "Unsupported architecture: $arch"
            exit 1
        fi
        wget -q $depsUrl -O deps.tar.xz > /dev/null 2>&1
        aws s3 cp s3://dolphin/source/dolphin.tar.xz ./ --endpoint-url ${{ secrets.ENDPOINT_URL }} --no-progress
        tar -xJf dolphin.tar.xz 2>&1
        tar -xJf deps.tar.xz -C dolphin > /dev/null 2>&1
        echo "commit=$(cat dolphin/version)" >> $GITHUB_ENV
        mv dolphin/dolphin_config.cmake dolphin/cmake/dolphin_config.cmake || true

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ${{ env.cache_key }}-${{ github.run_id }}
        restore-keys: |
          ${{ env.cache_key }}

    - name: Cache from S3
      run: |
        if [ -d .ccache ]; then
          exit 0
        fi
        if aws s3api head-object --bucket dolphin --key cache/${{ env.cache_key }}.tzst --endpoint-url ${{ secrets.ENDPOINT_URL }} > /dev/null 2>&1; then
          echo "Cache exists in S3, downloading..."
          aws s3 cp s3://dolphin/cache/${{ env.cache_key }}.tzst ccache.tzst --endpoint-url ${{ secrets.ENDPOINT_URL }} --no-progress
          tar -I unzstd -xf ccache.tzst
        else
          echo "Cache does not exist in S3"
        fi

    - name: Pull Docker image
      run: |
        docker pull ghcr.io/zerolover/github-action/lo:slim

    - name: Compile
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ghcr.io/zerolover/github-action/lo:slim \
          sh -c "ccache --set-config=cache_dir=/workspace/.ccache && ccache -sv && \
            git config --global --add safe.directory /workspace && \
            cd dolphin && mkdir build && cd build && cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache && \
            ninja && ninja install"

    - name: Cleanup cache
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ghcr.io/zerolover/github-action/lo:slim \
          sh -c "ccache --set-config=cache_dir=/workspace/.ccache && ccache -sv && \
            ccache --evict-older-than 1d && ccache -sv"

    - name: Setup Rclone
      if: ${{ github.event.inputs.cache_to_S3 == 'true' }}
      uses: AnimMouse/setup-rclone@v1
      with:
        rclone_config: ${{ secrets.RCLONE_CONFIG }}

    - name: Upload cache to S3
      if: ${{ github.event.inputs.cache_to_S3 == 'true' }}
      run: |
        tar -I "zstdmt -6 -k" -cf ${{ env.cache_key }}.tzst .ccache
        rclone copyto ${{ env.cache_key }}.tzst r2:dolphin/cache/${{ env.cache_key }}.tzst || true

    - name: Compress the output
      run: |
        wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool > /dev/null 2>&1
        chmod +x appimagetool
        cp -r dolphin/build/Dolphin dolphin.AppDir
        strip -s dolphin.AppDir/program/* > /dev/null 2>&1 || true
        ./appimagetool dolphin.AppDir dolphin-${{ env.arch }}.AppImage

    - name: Upload build artifacts
      id: artifact-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: dolphin-${{ env.arch }}.AppImage
        path: dolphin-${{ env.arch }}.AppImage

    - name: Prepare and send Feishu message
      if: always()
      run: |
        title="Dolphin ${{ runner.os }} ${{ env.arch }}"
        title_color=$([[ "${{ job.status }}" == "success" ]] && echo "green" || echo "red")
        date=$(date +'%Y-%m-%d')
        link_action=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}
        link_artifact=${{ steps.artifact-upload-step.outputs.artifact-url }}
        commit=${{ env.commit }}
        json_str='{"msg_type": "interactive", "card": {"type": "template", "data": {"template_id": "AAqBkUVXyqaTs", "template_version_name": "1.0.4", "template_variable": {"title": "'"$title"'", "title_color": "'"$title_color"'", "date": "'"$date"'", "link_action": "'"$link_action"'", "link_artifact": "'"$link_artifact"'", "commit": "'"$commit"'"}}}}'
        echo "json_str=$json_str" >> $GITHUB_ENV

    - name: feishu-bot
      if: always()
      uses: Rollingegg/feishu-robot-action@v1
      with:
        uuid: ${{ secrets.WEBHOOK_ID }}
        json: ${{ env.json_str }}
