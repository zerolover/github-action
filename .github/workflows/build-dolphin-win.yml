name: Build Dolphin (Windows)

on:
  workflow_dispatch:
    inputs:
      cache_to_S3:
        description: 'Upload cache to S3'
        required: true
        default: false

jobs:
  build:
    runs-on: windows-2019
    permissions:
      contents: write
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download and extract source
      run: |
        echo "Downloading..."
        $arch = $env:RUNNER_ARCH.ToLower()
        if ($arch -eq "x64") {
            $depsUrl = "${{ vars.DEPS_WIN_X64 }}"
        } elseif ($arch -eq "arm64") {
            $depsUrl = "${{ vars.DEPS_WIN_ARM64 }}"
        } else {
            echo "Unsupported architecture: $arch"
            exit 1
        }
        echo "arch=$arch" >> $env:GITHUB_ENV
        C:\msys64\usr\bin\wget -q $depsUrl -O deps.tar.xz
        aws s3 cp s3://dolphin/source/dolphin.tar.xz ./ --endpoint-url ${{ secrets.ENDPOINT_URL }} --no-progress
        echo "Extracting..."
        C:\msys64\usr\bin\tar.exe -xJf dolphin.tar.xz
        C:\msys64\usr\bin\tar.exe -xJf deps.tar.xz -C dolphin
        echo "commit=$(cat dolphin/version)" >> $env:GITHUB_ENV
        C:\msys64\usr\bin\mv.exe dolphin/dolphin_config.cmake dolphin/cmake/dolphin_config.cmake
        if ($LASTEXITCODE -ne 0) {
          exit 0
        }

    - name: Enable Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install tools
      run: |
        C:\msys64\usr\bin\pacman.exe -S --noconfirm bison flex gperf libxslt

        cd D:\
        mkdir tools > $null
        C:\msys64\usr\bin\wget.exe -q https://github.com/ccache/ccache/releases/download/v4.10.2/ccache-4.10.2-windows-x86_64.zip -O ccache.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip -O ninja.zip
        C:\msys64\usr\bin\unzip.exe -q -j ccache.zip -d tools
        C:\msys64\usr\bin\unzip.exe -q -j ninja.zip -d tools
        rm ccache.zip
        rm ninja.zip
        echo "D:\tools" >> $env:GITHUB_PATH

        $clOutput = cmd.exe /c "cl.exe 2>&1"
        $version = ($clOutput | Select-String -Pattern '(\d+\.\d+\.\d+)').Matches.Groups[1].Value
        $clver = $version -replace '\.', ''
        $cache_key = "ccache-${{ runner.os }}-${{ env.arch }}-${clver}"
        echo "cache_key=$cache_key" >> $env:GITHUB_ENV

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ${{ env.cache_key }}-${{ github.run_id }}
        restore-keys: |
          ${{ env.cache_key }}

    - name: Cache from S3
      run: |
        if (Test-Path -Path .ccache) {
          Write-Output ".ccache directory exists, skipping S3 download"
          exit 0
        }
        aws s3api head-object --bucket dolphin --key cache/${{ env.cache_key }}.tzst --endpoint-url ${{ secrets.ENDPOINT_URL }} | Out-Null
        if ($LASTEXITCODE -eq 0) {
          echo "Cache exists in S3, downloading..."
          aws s3 cp s3://dolphin/cache/${{ env.cache_key }}.tzst ccache.tzst --endpoint-url ${{ secrets.ENDPOINT_URL }} --no-progress
          C:\msys64\usr\bin\tar.exe -I "zstd -d" -xf ccache.tzst
        } else {
          echo "Cache does not exist in S3"
          exit 0
        }

    - name: Setup ccache
      run: |
        ccache --set-config=cache_dir="$env:GITHUB_WORKSPACE\.ccache"
        ccache -sv

    - name: Compile
      run: |
        cd dolphin
        mkdir build
        cd build
        cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        ninja
        ninja install

    - name: Cleanup cache
      run: |
        ccache -sv
        ccache --evict-older-than 1d
        ccache -sv

    - name: Setup Rclone
      if: ${{ github.event.inputs.cache_to_S3 == 'true' }}
      uses: AnimMouse/setup-rclone@v1
      with:
        rclone_config: ${{ secrets.RCLONE_CONFIG }}

    - name: Upload cache to S3
      if: ${{ github.event.inputs.cache_to_S3 == 'true' }}
      run: |
        C:\msys64\usr\bin\tar.exe -I "zstd -T0 -6 -k" -cf ${{ env.cache_key }}.tzst .ccache
        rclone copyto ${{ env.cache_key }}.tzst r2:dolphin/cache/${{ env.cache_key }}.tzst
        if ($LASTEXITCODE -ne 0) {
          echo "Upload failed, but continuing..."
          exit 0
        }

    - name: Compress the output
      run: |
        cd dolphin/build
        7z a -t7z dolphin-win.7z Dolphin

    - name: Upload build artifacts
      id: artifact-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: dolphin-win.7z
        path: dolphin/build/dolphin-win.7z

    - name: Prepare and send Feishu message
      if: always()
      run: |
        $title = "Dolphin ${{ runner.os }} ${{ env.arch }}"
        if ("${{ job.status }}" -eq "success") {
          $title_color = "green"
        } else {
          $title_color = "red"
        }
        $date = (Get-Date).ToString("yyyy-MM-dd")
        $link_action = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
        $link_artifact = "${{ steps.artifact-upload-step.outputs.artifact-url }}"
        $commit = "${{ env.commit }}"
        $json_str = @"
        {"msg_type": "interactive","card": {"type": "template","data": {"template_id": "AAqBkUVXyqaTs","template_version_name": "1.0.4","template_variable": {"title": "$title","title_color": "$title_color","date": "$date","link_action": "$link_action","link_artifact": "$link_artifact","commit": "$commit"}}}}
        "@
        echo "json_str=$json_str" >> $env:GITHUB_ENV

    - name: feishu-bot
      if: always()
      uses: Rollingegg/feishu-robot-action@v1
      with:
        uuid: ${{ secrets.WEBHOOK_ID }}
        json: ${{ env.json_str }}
